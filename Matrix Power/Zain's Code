#include <bits/stdc++.h>
#define ll long long
#define MOD 1000000007

using namespace std;

typedef pair<int,int> ii;
typedef vector<ll> row;
typedef vector<row> matrix;


matrix zero(int r, int c){
  return matrix(r, row(c, 0));
}

matrix I(int n){
  matrix ret = zero(n, n);
  for(int i=0; i<n; i++) ret[i][i] = 1;
  return ret;
}

matrix mult(const matrix &a, const matrix &b){
  matrix ret = zero(a.size(), b[0].size());
  for(int i=0; i<a.size(); i++){
    for(int k=0; k<a[0].size(); k++){
      if(!a[i][k]) continue;
      for(int j=0; j<b[0].size(); j++){
        ret[i][j] += (a[i][k] * b[k][j])%MOD;
        ret[i][j] %= MOD;
      }
    }
  }
  return ret;
}

matrix pow(const matrix &a, ll p){
  if(!p) return I(a.size());
  if(p == 1ll) return a;
  matrix x = mult(a, a);
  matrix xx = pow(x, p/2ll);
  if(p & 1ll) return mult(a, xx);
  return xx;
}

matrix powSum(const matrix &a, ll p){
  int sz = a.size();
  auto tmp = zero(sz * 2, sz * 2);
  for(int i=0; i<sz; i++){
    tmp[i+sz][i+sz] = 1;
    for(int j=0; j<sz; j++)
      tmp[i][j] = tmp[i+sz][j] = a[i][j];
  }
  tmp = pow(tmp, p);
  auto ret = zero(sz, sz);
  for(int i=0; i<sz; i++)
    for(int j=0; j<sz; j++)
      ret[i][j] = tmp[i+sz][j];
  return ret;
}

void dbg(const matrix &a){
  puts("");
  for(auto i: a){
    for(auto j: i){
      cout << j << " ";
    }
    puts("");
  }
  puts("");
}

ll n, k, a, b, c;

int main(){
  cin >> n >> k;
  auto init = zero(20, 20);
  auto trans = zero(20, 20);
  init[0][0] = 1;
  for(int i=0; i<n; i++){
    cin >> a >> b >> c;
    trans = zero(20, 20);
    for(int x=0; x<=c; x++){
      trans[x][x] = 1;
      if(x)
        trans[x][x - 1] = 1;
      if(x < c)
        trans[x][x + 1] = 1;
    }
    trans = pow(trans, min(b, k) - a);
    init = mult(init, trans);
  }
  cout << init[0][0];
  return 0;
}
